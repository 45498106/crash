{"version":3,"sources":["../src/CrashWorld.js"],"names":["CrashWorld","staticBodies","STATIC","dynamicBodies","DYNAMIC","bodies","collisions","narrowPhase","dt","collisionKeys","DEBUG","body","type","add","remove","getCollisions","console","log","i","dynamicItems","children","length","update","empty","reset","a","b","type1","type2","getKey","size","list","sortAxisList","body1","newItemLeft","position","x","boundingBox","upper","j","body2","currentItemRight","lower","canCollide","key","item2","item1","push","l","v","a2"],"mappings":"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","file":"CrashWorld.js","sourcesContent":["  //  var CollisionTest = require('../Group');\n\nimport Group from './utils/Group';\nimport Body from './Body';\n\nimport NarrowPhase from './NarrowPhase';\nimport SpatialHash from './SpatialHash';\n\nexport default class CrashWorld\n{\n\n\n    constructor()\n    {\n        // on hit test against.. platforms\n\n        this.staticBodies = this[Body.STATIC] = new Group();\n        this.dynamicBodies = this[Body.DYNAMIC] = new Group();\n        this.bodies = new Group();\n\n        this.collisions = [];\n        this.narrowPhase = new NarrowPhase();\n\n        this.dt = 1;\n\n        this.collisionKeys = {};\n\n        this.DEBUG = false;\n\n    }\n\n    add(body)\n    {\n        this[body.type].add(body);\n        this.bodies.add(body);\n    }\n\n    remove(body)\n    {\n        this[body.type].remove(body);\n        this.bodies.remove(body);\n    }\n\n    update()\n    {\n\n        //TODO broadphase\n\n        var collisions = this.getCollisions();\n\n        console.log(collisions);\n\n        for (var i = 0; i < this.dynamicItems.children.length; i++)\n        {\n            this.dynamicItems.children[i].body.update(this.dt);\n        };\n\n        //this.narrowPhase.hitTest(collisions);\n       // };\n\n\n    }\n\n    reset()\n    {\n        this.staticBodies.empty();\n        this.dynamicBodies.empty();\n        this.bodies.empty();\n\n        this.collisions.length = 0;\n\n        this.narrowPhase.reset();\n\n    }\n\n    getKey(a, b)\n    {\n        return (a << 12) + b;\n    }\n\n    registerCollison(type1, type2)\n    {\n        this.collisionKeys[this.getKey(type1, type2)] = true;\n        this.collisionKeys[this.getKey(type2, type1)] = true;\n    }\n\n    getCollisions()\n    {\n        this.collisions.length = 0;\n\n        var size = 0;\n\n        //SAP!\n        var list =  this.bodies.children;\n        this.sortAxisList( list );\n\n        for (var i = 0; i < list.length; i++)\n        {\n            var body1 = list[i];\n            var newItemLeft = body1.position.x + body1.boundingBox.upper.x;\n\n            for (var j = i+1; j < list.length; j++)\n            {\n                var body2 = list[j];\n\n                var currentItemRight = body2.body.position.x + body2.boundingBox.lower.x;// - 5;\n\n                if(newItemLeft <= currentItemRight)\n                {\n                    break;\n                }\n                else\n                {\n                    var canCollide = true;\n                    var key = this.getKey(item2.type, item1.type)\n                    //TODO items that are the same cannot collide..\n\n                    if(!this.collisionKeys[key])//platform.type === item.type && !item.collideWithSelf)\n                    {\n                        canCollide = false;\n                    }\n                    else\n                    {\n                        if(!body2.canCollide || !body1.canCollide)\n                        {\n                            canCollide = false;\n                        }\n                    }\n\n                    if(canCollide)\n                    {\n                       this.collisions.push(body1,\n                                            body2);\n                    }\n                }\n            }\n        };\n\n        // finallly hit tes the bounds..\n\n\n        return this.collisions;\n    }\n\n\n    sortAxisList(a)\n    {\n        for(var i=1,l=a.length; i<l; i++)\n        {\n            var v = a[i];\n            for(var j=i - 1;j>=0;j--)\n            {\n                var a2 = a[j];\n\n                if(a2.boundingBox.lower.x + a2.position.x  <= v.boundingBox.lower.x + v.position.x )\n                {\n                    break;\n                }\n\n                a[j+1] = a[j];\n            }\n\n            a[j+1] = v;\n        }\n\n        return a;\n    };\n\n}"]}