{"version":3,"sources":["../../src/old/ConstraintSolver.js"],"names":["define","require","exports","module","CrashBody","ConstraintSolver","solve","collisions","first","i","length","crashData","item","object1","platform","object2","projection","penetration","body","type","DYNAMIC","position","x","y","forceX","velocity","forceY","solve3","solve2","item2","body1","body2","rect1","shape","rect2","p1x","p1y","p2x","p2y","topDist","height","bottomDist","leftDist","width","rightDist","dist","passthrough"],"mappings":"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","file":"ConstraintSolver.js","sourcesContent":["define(function (require, exports, module) \n{\n    var CrashBody = require('./CrashBody');\n\n    var ConstraintSolver = function()\n    {\n\n    }\n\n    ConstraintSolver.solve = function(collisions, first)\n    {\n        for ( i = 0; i <  collisions.length; i++) \n        { \n           \n            var crashData = collisions[i];\n            var item = crashData.object1;\n            var platform = crashData.object2;\n\n            var projection =  crashData.projection;\n            var penetration =  crashData.penetration;\n\n            if(platform.body.type === CrashBody.DYNAMIC)\n            { \n                item.position.x -= projection.x * penetration * 0.5;//7;\n                item.position.y -= projection.y * penetration * 0.5;//7;   \n\n                platform.position.x += projection.x * penetration * 0.5;//3;\n                platform.position.y += projection.y * penetration * 0.5;//3; \n        \n           \n                // calculate velocits..\n                var forceX = item.body.velocity.x - platform.body.velocity.x;\n                var forceY = item.body.velocity.y - platform.body.velocity.y;\n                \n                if(projection.x !== 0)\n                {\n                    if(forceX*projection.x <= 0)\n                    {\n                        item.body.velocity.x -= forceX * 0.5;\n                        platform.body.velocity.x += forceX * 0.5;\n                    }\n\n                }\n                else\n                {\n                    if(forceY*projection.y <= 0)\n                    {\n                        item.body.velocity.y -= forceY * 0.5;\n                        platform.body.velocity.y += forceY * 0.5;\n                    }\n                }\n            }\n            else\n            {\n                item.position.x -= projection.x * penetration;\n                item.position.y -= projection.y * penetration; \n\n                var forceX = item.body.velocity.x - platform.body.velocity.x;\n                var forceY = item.body.velocity.y - platform.body.velocity.y;\n\n\n                if(projection.x !== 0)\n                {\n                    if(forceX*projection.x <= 0)\n                    {\n                        item.body.velocity.x -= forceX;\n                    }\n                }\n                else\n                {\n                    if(forceY*projection.y <= 0)\n                    {\n                        item.body.velocity.y -= forceY;\n                    }\n\n                    // moving platforms..                    \n                    item.body.position.x += platform.body.velocity.x;\n                }\n           \n            }\n        }\n    }\n\n    ConstraintSolver.solve3 = function(crashData)\n    {\n  //      var crashData = collisions[i];\n        var item = crashData.object1;\n        var platform = crashData.object2;\n\n        var projection =  crashData.projection;\n        var penetration =  crashData.penetration;\n\n        if(platform.body.type === CrashBody.DYNAMIC)\n        { \n            item.position.x -= projection.x * penetration * 0.5;//7;\n            item.position.y -= projection.y * penetration * 0.5;//7;   \n\n            platform.position.x += projection.x * penetration * 0.5;//3;\n            platform.position.y += projection.y * penetration * 0.5;//3; \n    \n       \n            // calculate velocits..\n            var forceX = item.body.velocity.x - platform.body.velocity.x;\n            var forceY = item.body.velocity.y - platform.body.velocity.y;\n            \n            if(projection.x !== 0)\n            {\n                if(forceX*projection.x <= 0)\n                {\n                    item.body.velocity.x -= forceX * 0.5;\n                    platform.body.velocity.x += forceX * 0.5;\n                }\n\n            }\n            else\n            {\n                if(forceY*projection.y <= 0)\n                {\n                    item.body.velocity.y -= forceY * 0.5;\n                    platform.body.velocity.y += forceY * 0.5;\n                }\n            }\n        }\n        else\n        {\n            item.position.x -= projection.x * penetration;\n            item.position.y -= projection.y * penetration; \n\n            var forceX = item.body.velocity.x - platform.body.velocity.x;\n            var forceY = item.body.velocity.y - platform.body.velocity.y;\n\n\n            if(projection.x !== 0)\n            {\n                if(forceX*projection.x <= 0)\n                {\n                    item.body.velocity.x -= forceX;\n                }\n            }\n            else\n            {\n                if(forceY*projection.y <= 0)\n                {\n                    item.body.velocity.y -= forceY;\n                }\n                \n                // moving platforms..                    \n                item.body.position.x += platform.body.velocity.x;\n            }\n       \n        }\n    }\n\n\n    ConstraintSolver.solve2 = function(collisions, first)\n    {\n        for ( i = 0; i <  collisions.length; i++) \n        { \n            var crashData = collisions[i];\n            var item = crashData.object1;\n            var platform = crashData.object2;\n            var item2 = crashData.object2;\n\n            var projection =  crashData.projection;\n            var penetration =  crashData.penetration;\n\n            var body1 = item.body;\n            var body2 = item2.body;\n\n            var rect1 = body1.shape;\n            var rect2 = body2.shape;\n\n            var p1x = rect1.x + item.position.x;\n            var p1y = rect1.y + item.position.y;\n\n            var p2x = rect2.x + item2.position.x;\n            var p2y = rect2.y + item2.position.y;\n\n            var topDist =  (p1y + rect1.height) - p2y;\n        //bias??\n        //topDist +=\n        var bottomDist = (p2y + rect2.height) - p1y;\n\n        var leftDist = (p1x + rect1.width) - p2x;\n        var rightDist = (p2x + rect2.width) - p1x;\n\n        var dist = 999999;\n        \n        // cheecky padding for pass through\n        if(item2.passthrough)\n        {\n         //   leftDist += 4;\n           // rightDist += 4;\n        }\n\n        //\n        //\n        \n        if(leftDist < dist)dist = leftDist;\n        if(rightDist < dist)dist = rightDist;\n        if(topDist < dist)dist = topDist;\n        if(bottomDist < dist)dist = bottomDist;\n\n        if(dist > 0)\n        {\n            if(dist == leftDist)\n            {\n                projection.x = -1;\n                projection.y = 0;\n            }\n            else if(dist == rightDist)\n            {\n                projection.x = 1;\n                projection.y = 0;\n            }\n            else if(dist == topDist)\n            {\n          \n                projection.x = 0;\n                projection.y = -1;\n            }\n            else if(dist == bottomDist)\n            {\n                projection.x = 0;\n                projection.y = 1;\n            }\n\n            penetration = -dist;\n\n\n           // crashData.penetration = penetration;\n\n            if(platform.body.type === CrashBody.DYNAMIC)\n            { \n\n\n                item.position.x -= projection.x * penetration * 0.5;//7;\n                item.position.y -= projection.y * penetration * 0.5;//7;   \n\n                platform.position.x += projection.x * penetration * 0.5;//3;\n                platform.position.y += projection.y * penetration * 0.5;//3; \n        \n           \n                // calculate velocits..\n                var forceX = item.body.velocity.x - platform.body.velocity.x;\n                var forceY = item.body.velocity.y - platform.body.velocity.y;\n                \n                if(projection.x !== 0)\n                {\n                    if(forceX*projection.x <= 0)\n                    {\n                        item.body.velocity.x -= forceX * 0.5;\n                        platform.body.velocity.x += forceX * 0.5;\n                    }\n\n                }\n                else\n                {\n                    if(forceY*projection.y <= 0)\n                    {\n                        item.body.velocity.y -= forceY * 0.5;\n                        platform.body.velocity.y += forceY * 0.5;\n                    }\n                }\n            }\n            else\n            {\n                item.position.x -= projection.x * penetration;\n                item.position.y -= projection.y * penetration; \n\n                var forceX = item.body.velocity.x - platform.body.velocity.x;\n                var forceY = item.body.velocity.y - platform.body.velocity.y;\n\n\n                if(projection.x !== 0)\n                {\n                    if(forceX*projection.x <= 0)\n                    {\n                        item.body.velocity.x -= forceX;\n                    }\n                }\n                else\n                    {\n                    if(forceY*projection.y <= 0)\n                    {\n                        item.body.velocity.y -= forceY;\n                    }\n                    // moving platforms..                    \n                    item.body.position.x += platform.body.velocity.x;\n                }\n           \n            }\n            \n            }\n\n        }\n\n    }\n\n    module.exports = ConstraintSolver\n\n});"]}