{"version":3,"sources":["../../src/old/NarrowPhase.js"],"names":["define","require","exports","module","PIXI","Vector","CrashData","CrashBody","ConstraintSolver","NarrowPhase","collisions","pool","tickId","currentCollisions","collisionDatas","prototype","hitTest","j","i","length","data","hitTestAABBAABB","object1","body","solid","object2","solve","collisonData","_tickId","endCollision","splice","item","item2","body1","body2","rect1","shape","rect2","p1x","x","position","p1y","y","p2x","p2y","topDist","height","bottomDist","leftDist","width","rightDist","dist","projection","penetration","collisionData","startCollision","ignore","crashData","platform","type","DYNAMIC","forceX","velocity","forceY","bounce","key","UID","currentSurface","onGround","pop","_key","flip","onCollideBegin","push","world","onCollideEnd","reset"],"mappings":"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","file":"NarrowPhase.js","sourcesContent":["define(function (require, exports, module)\n{\n    var PIXI = require('PIXI');\n    var Vector = require('./Vector');\n    var CrashData = require('./CrashData');\n    var CrashBody = require('./CrashBody');\n    var ConstraintSolver = require('./ConstraintSolver');\n\n    var NarrowPhase = function()\n    {\n        this.collisions = {};\n\n        this.pool = [];\n\n        this.tickId = 0;\n\n        this.currentCollisions = [];\n\n        this.collisionDatas = [];\n    }\n\n\n    NarrowPhase.prototype.hitTest = function(collisions)\n    {\n        this.tickId ++;\n\n        //TODO OPTIMISE THIS SHIZ\n        for(var j = 0; j < 2; j++)\n        {\n            for (var i = 0; i < collisions.length; i+=2)\n            {\n               var data = this.hitTestAABBAABB(collisions[i],  collisions[i+1]);\n\n                if(data)\n                {\n                    if(data.object1.body.solid && data.object2.body.solid)\n                    {\n                        this.solve(data);\n                    }\n                }\n            }\n\n//            ConstraintSolver.solve3(this.collisionDatas);\n         //   this.collisionDatas.length = 0;\n        }\n\n\n        // check for dead collisons..\n        for (var i = 0; i < this.currentCollisions.length; i++) {\n\n            var collisonData = this.currentCollisions[i];\n\n            if(collisonData._tickId !== this.tickId)\n            {\n                // ended!\n                this.endCollision( collisonData );\n                this.currentCollisions.splice(i, 1);\n                i--;\n            }\n        };\n    }\n\n    NarrowPhase.prototype.hitTestAABBAABB = function(item, item2)\n    {\n\n        var body1 = item.body;\n        var body2 = item2.body;\n\n       // if(body1.sleeping && body2.sleeping)return;\n\n        var rect1 = body1.shape;\n        var rect2 = body2.shape;\n\n        var p1x = rect1.x + item.position.x;\n        var p1y = rect1.y + item.position.y;\n\n        var p2x = rect2.x + item2.position.x;\n        var p2y = rect2.y + item2.position.y;\n\n        var topDist =  (p1y + rect1.height) - p2y;\n        var bottomDist = (p2y + rect2.height) - p1y;\n\n        var leftDist = (p1x + rect1.width) - p2x;\n        var rightDist = (p2x + rect2.width) - p1x;\n\n        var dist = 999999;\n\n        if(leftDist < dist)dist = leftDist;\n        if(rightDist < dist)dist = rightDist;\n        if(topDist < dist)dist = topDist;\n        if(bottomDist < dist)dist = bottomDist;\n\n        // som pass through platform bias!\n      /*  if(item2.passthrough)\n        {\n            topDist -= 2;\n            if(topDist < dist)\n            {\n                dist = topDist = topDist + 2;\n            }\n        }*/\n\n        if(dist > 0)\n        {\n            // hit!\n            var projection = new Vector();\n\n            if(dist == leftDist)\n            {\n                projection.x = -1;\n                projection.y = 0;\n            }\n            else if(dist == rightDist)\n            {\n                projection.x = 1;\n                projection.y = 0;\n            }\n            else if(dist == topDist)\n            {\n\n                projection.x = 0;\n                projection.y = -1;\n            }\n            else if(dist == bottomDist)\n            {\n                projection.x = 0;\n                projection.y = 1;\n            }\n\n            var penetration = -dist;\n\n\n            var collisionData = this.startCollision(item, item2, penetration, projection);\n\n\n            if(!collisionData.ignore)\n            {\n                return collisionData;\n            }\n        }\n\n        return null;\n    }\n\n    NarrowPhase.prototype.solve = function(crashData)\n    {\n  //      var crashData = collisions[i];\n        var item = crashData.object1;\n        var platform = crashData.object2;\n\n        var projection =  crashData.projection;\n        var penetration =  crashData.penetration;\n\n        if(platform.body.type === CrashBody.DYNAMIC)\n        {\n            item.position.x -= projection.x * penetration * 0.5;//7;\n            item.position.y -= projection.y * penetration * 0.5;//7;\n\n            platform.position.x += projection.x * penetration * 0.5;//3;\n            platform.position.y += projection.y * penetration * 0.5;//3;\n\n\n            // calculate velocits..\n            var forceX = item.body.velocity.x - platform.body.velocity.x;\n            var forceY = item.body.velocity.y - platform.body.velocity.y;\n\n            if(projection.x !== 0)\n            {\n                if(forceX*projection.x <= 0)\n                {\n                    item.body.velocity.x -= forceX * 0.5;\n                    platform.body.velocity.x += forceX * 0.5;\n                }\n\n            }\n            else\n            {\n                if(forceY*projection.y <= 0)\n                {\n                    item.body.velocity.y -= forceY * 0.5;\n                    platform.body.velocity.y += forceY * 0.5;\n                }\n            }\n        }\n        else\n        {\n            item.position.x -= projection.x * penetration;\n            item.position.y -= projection.y * penetration;\n\n            var forceX = item.body.velocity.x - platform.body.velocity.x;\n            var forceY = item.body.velocity.y - platform.body.velocity.y;\n\n\n            if(projection.x !== 0)\n            {\n                if(forceX*projection.x <= 0)\n                {\n                    item.body.velocity.x *= -item.body.bounce//-= forceX;\n                }\n            }\n            else\n            {\n                if(forceY*projection.y <= 0)\n                {\n                    item.body.velocity.y *= -item.body.bounce//-= forceX;\n                  //  item.body.velocity.y -= forceY;\n                }\n\n                // moving platforms..\n                //item.body.position.x += platform.body.velocity.x;\n            }\n\n        }\n    }\n\n    NarrowPhase.prototype.startCollision = function(object1, object2, penetration, projection)\n    {\n        //TODO keep an eye out on this key generation!\n        var key;\n\n        if(object1.UID > object2.UID)\n        {\n            key = (object2.UID << 12) + object1.UID;//object1.UID + \":\"+ object2.UID;\n        }\n        else\n        {\n            key = (object1.UID << 12) + object2.UID;//object1.UID + \":\"+ object2.UID;\n\n        }\n\n        var collisonData = this.collisions[key];\n\n        if( collisonData )\n        {\n\n            collisonData.penetration = penetration;\n            collisonData.projection = projection;\n            collisonData._tickId = this.tickId;\n\n            if(!collisonData.ignore)\n            {\n                if(projection.y === -1)\n                {\n                    if(object1.body.velocity.y >= 0)\n                    {\n                        object1.body.currentSurface = object2;\n                        object1.onGround = true;\n                    }\n                }\n                else if(projection.y === 1)\n                {\n                    if(object2.body.velocity.y >= 0)\n                    {\n                        object2.body.currentSurface = object1;\n                        object2.onGround = true;\n                    }\n                }\n            }\n\n\n            return collisonData;\n        }\n\n        collisonData = this.pool.pop();\n\n        if(!collisonData)\n        {\n            collisonData = new CrashData(object1,\n                                        object2,\n                                        penetration,\n                                        projection,\n                                        false);\n        }\n        else\n        {\n            collisonData.object1 = object1;\n            collisonData.object2 = object2;\n            collisonData.penetration = penetration;\n            collisonData.projection = projection;\n            collisonData.ignore = false;\n        }\n\n        collisonData._key = key;\n        collisonData._tickId = this.tickId;\n\n         if(projection.y === -1 * object1.body.flip)\n        {\n            object1.body.currentSurface = object2;\n            object1.onGround = true;\n        }\n        else if(projection.y === 1 * object2.body.flip)\n        {\n            object2.body.currentSurface = object1;\n            object2.onGround = true;\n        }\n\n        //ASSUMING SECOND IS STATIC!\n      /*  if(object2.passthrough)\n        {\n            if(projection.y !== -1 * object1.body.flip)// && object1.body.velocity.y < 0)\n            {\n                collisonData.ignore = true;\n            }\n        }*/\n\n        // collisde begine..\n        if(object1.onCollideBegin)object1.onCollideBegin(collisonData);\n        if(object2.onCollideBegin)object2.onCollideBegin(collisonData);\n\n\n\n\n\n        this.collisions[key] = collisonData;\n\n        this.currentCollisions.push(collisonData);\n\n        return collisonData;\n    }\n\n    NarrowPhase.prototype.endCollision = function(collisionData)\n    {\n\n        var key = collisionData._key\n\n        var collisonData = this.collisions[key];\n\n        if( collisonData )\n        {\n            // end collision..\n/*\n            if(collisionData.object2 === collisionData.object1.body.currentSurface)\n            {\n                collisionData.object1.onGround = false;\n                collisionData.object1.body.currentSurface = null;\n            }\n            else if(collisionData.object1 === collisionData.object2.body.currentSurface)\n            {\n                collisionData.object2.onGround = false;\n                collisionData.object2.body.currentSurface = null;\n            }\n*/\n            this.pool.push( collisonData );\n            this.collisions[key] = null;\n\n        }\n\n        //TODO think about this!\n        if(collisionData.object1.world)\n        {\n\n            if(collisionData.object1.onCollideEnd)collisionData.object1.onCollideEnd(collisonData);\n            if(collisionData.object2.onCollideEnd)collisionData.object2.onCollideEnd(collisonData);\n        }\n\n\n       return collisonData;\n    }\n\n    NarrowPhase.prototype.reset = function()\n    {\n        this.collisions ={};\n        this.tickId = 0;\n\n        this.currentCollisions = [];\n    }\n\n    module.exports = NarrowPhase;\n\n});"]}