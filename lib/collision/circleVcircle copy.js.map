{"version":3,"sources":["../../src/collision/circleVcircle copy.js"],"names":["tempAABB","tempAABB2","Collisions","x","y","collisionMap","CIRCLE","circleVcircle","RECTANGLE","rectangleVrectangle","LINE","lineVline","rectangleVcircle","rectangleVline","circleVline","contacts","body1","body2","bounds","globalBounds","bounds2","i","shapes","length","shape1","j","shape2","type","aabb1","aabb2","lower1","lower","upper1","upper","lower2","upper2","circle1","circle2","success","fail","px","position","py","px2","py2","dx","dy","dist","Math","sqrt","penetration","radius","create","rect1","rect2","line1","line2","bodyRect","rectangle","bodyCirc","circle","s","sin","rotation","c","cos","ox","oy","cx","cy","localCirclePositionRot","localCirclePosition","sub","aabb","rect","halfWidth","width","halfHeight","height","closestPoint","clone","distX","distY","left","leftDist","rightDist","topDist","bottomDist","penetrationLine","penetrationLine2","minus","normalize","temp3","line"],"mappings":"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","file":"circleVcircle copy.js","sourcesContent":["\nimport AABB from './AABB';\nimport Vector from './Vector';\nimport Shape from './shapes/Shape';\n\nconst tempAABB = new AABB();\nconst tempAABB2 = new AABB();\n\nexport default class Collisions\n{\n   /*\n     * @class Vector\n     * @constructor\n     * @param x {Number} position of the point\n     * @param y {Number} position of the point\n     */\n    constructor(x, y)\n    {\n        this.collisionMap = {};\n\n        //(object2.UID << 12) + object1.UID;\n\n        this[Shape.CIRCLE | Shape.CIRCLE] = this.circleVcircle;\n        this[Shape.RECTANGLE | Shape.RECTANGLE] = this.rectangleVrectangle;\n        this[Shape.LINE | Shape.LINE] = this.lineVline;\n        this[Shape.RECTANGLE | Shape.CIRCLE] = this.rectangleVcircle;\n        this[Shape.RECTANGLE | Shape.LINE] = this.rectangleVline;\n        this[Shape.CIRCLE | Shape.LINE] = this.circleVline;\n\n\n        this.contacts = [];\n    }\n\n    collide(body1, body2)\n    {\n        const bounds = body1.globalBounds(tempAABB)\n        const bounds2 = body2.globalBounds(tempAABB2)\n\n      //  if(this.aabbVaabb(bounds, bounds2))\n       // {\n            // hit test\n            // bounding boxes have collided\n\n        for (var i = 0; i < body1.shapes.length; i++)\n        {\n            const shape1 = body1.shapes[i];\n\n            for (var j = 0; j < body2.shapes.length; j++)\n            {\n                const shape2 = body2.shapes[j];\n\n                if(shape1.type < shape2.type)\n                {\n                    this[shape1.type | shape2.type](\n                        body1,\n                        shape1,\n                        body2,\n                        shape2\n                    );\n                }\n                else\n                {\n                    this[shape2.type | shape1.type](\n                        body2,\n                        shape2,\n                        body1,\n                        shape1\n                    );\n                }\n            }\n        }\n\n    }\n\n    aabbVaabb(aabb1, aabb2)\n    {\n        const lower1 = aabb1.lower;\n        const upper1 = aabb1.upper;\n        const lower2 = aabb2.lower;\n        const upper2 = aabb2.upper;\n\n        return ((lower2.x <= upper1.x && upper1.x <= upper2.x) || (lower1.x <= upper2.x && upper2.x <= upper1.x)) &&\n               ((lower2.y <= upper1.y && upper1.y <= upper2.y) || (lower1.y <= upper2.y && upper2.y <= upper1.y));\n    }\n\n    circleVcircle(body1, circle1, body2, circle2, success, fail)\n    {\n        const px = body1.position.x + circle1.position.x;\n        const py = body1.position.y + circle1.position.y;\n\n        const px2 = body2.position.x + circle2.position.x;\n        const py2 = body2.position.y + circle2.position.y;\n\n        const dx = px - px2;\n        const dy = py - py2;\n\n        const dist = Math.sqrt(dx * dx + dy * dy);\n\n        const penetration = dist - (circle1.radius + circle2.radius);\n\n        if(penetration < 0)\n        {\n            // TODO pooling..\n            success(body1,\n                    circle1,\n                    body2,\n                    circle2,\n                    penetration,\n                    Vector.create(dx/dist,dy/dist))\n        }\n        else\n        {\n            fail(body1,\n                 circle1,\n                 body2,\n                 circle2);\n        }\n    }\n\n    rectangleVrectangle(rect1, rect2)\n    {\n\n    }\n\n    lineVline(line1, line2)\n    {\n\n    }\n\n    rectangleVcircle(bodyRect, rectangle, bodyCirc, circle, success, fail)\n    {\n        var s = Math.sin(-rectangle.rotation);\n        var c = Math.cos(-rectangle.rotation);\n\n        var ox = bodyRect.position.x + rectangle.position.x;\n        var oy = bodyRect.position.y + rectangle.position.y;\n\n        var cx = bodyCirc.position.x + circle.position.x;\n        var cy = bodyCirc.position.y + circle.position.y;\n\n        var localCirclePositionRot = new Vector();\n        localCirclePositionRot.x = c * (cx - ox) - s * (cy - oy) + ox;\n        localCirclePositionRot.y = s * (cx - ox) + c * (cy - oy) + oy;\n\n        var localCirclePosition = Vector.sub(localCirclePositionRot, localCirclePosition, aabb.position);\n\n\n        var radius = circle.radius;\n        var rect = rectangle;\n        var halfWidth = rect.width/2;\n        var halfHeight = rect.height/2;\n\n        var closestPoint = Vector.clone(localCirclePosition);\n\n        if(localCirclePosition.x < -halfWidth)\n        {\n            closestPoint.x = -halfWidth;\n        }\n        else if(localCirclePosition.x > halfWidth)\n        {\n            closestPoint.x = halfWidth;\n        }\n\n        if(localCirclePosition.y < -halfHeight)\n        {\n            closestPoint.y = -halfHeight;\n        }\n        else if(localCirclePosition.y > halfHeight)\n        {\n            closestPoint.y = halfHeight;\n        }\n\n\n        var distX = closestPoint.x - localCirclePosition.x;\n        var distY = closestPoint.y - localCirclePosition.y;\n        var dist = distX * distX + distY * distY ;\n\n        if(dist === 0)\n        {\n            closestPoint.x = rect.left;\n\n            var leftDist =  localCirclePosition.x - rect.left;\n            var rightDist = halfWidth - localCirclePosition.x;\n\n            var topDist =  localCirclePosition.y - -halfHeight;\n            var bottomDist = halfHeight - localCirclePosition.y;\n\n            var dist = 999999;\n\n            if(leftDist < dist)dist = leftDist;\n            if(rightDist < dist)dist = rightDist;\n            if(topDist < dist)dist = topDist;\n            if(bottomDist < dist)dist = bottomDist;\n\n            penetrationLine = new Vector();//this.temp4;\n            if(dist == leftDist)\n            {\n                penetrationLine.x =-1\n                penetrationLine.y = 0.00001;\n            }\n            else if(dist == rightDist)\n            {\n                penetrationLine.x = 1\n                penetrationLine.y = 0.00001;\n            }\n            else if(dist == topDist)\n            {\n                penetrationLine.x = 0.00001;\n                penetrationLine.y = -1;\n            }\n            else if(dist == bottomDist)\n            {\n                penetrationLine.x = 0.00001\n                penetrationLine.y = 1;\n            }\n\n            var penetration = -dist-radius;\n\n            penetrationLine2 =  new Vector()//new Vector();\n            penetrationLine2.x = (penetrationLine.x * c) + (penetrationLine.y * s)\n            penetrationLine2.y = (penetrationLine.y * c) - (penetrationLine.x * s)\n\n            // reaction...\n          //  circle.position.x -= penetrationLine2.x * (penetration);\n         //   circle.position.y -= penetrationLine2.y * (penetration);\n\n            success(bodyRect,\n                    rectangle,\n                    bodyCirc,\n                    circle,\n                    penetration,\n                    penetrationLine2)\n\n            //success(circle, aabb, penetration, penetrationLine2);\n            return\n\n        }\n        else if(radius * radius > dist)\n        {\n            var penetrationLine = localCirclePosition.minus(closestPoint);\n\n            var penetration = penetrationLine.length() - radius;\n\n            if(penetration < 0)\n            {\n                penetrationLine.normalize();\n\n                penetrationLine2 = this.temp3//new Vector();\n                penetrationLine2.x = (penetrationLine.x * c) + (penetrationLine.y * s)\n                penetrationLine2.y = (penetrationLine.y * c) - (penetrationLine.x * s)\n\n                // reaction...\n              //  circle.position.x -= penetrationLine2.x * (penetration);\n              //  circle.position.y -= penetrationLine2.y * (penetration);\n\n\n                success(bodyRect,\n                        rectangle,\n                        bodyCirc,\n                        circle,\n                        penetration,\n                        penetrationLine2)\n\n                return\n            }\n        }\n\n        //no collision\n        fail(bodyRect,\n             rectangle,\n             bodyCirc,\n             circle);\n    }\n\n    rectangleVline(rectangle, line)\n    {\n\n    }\n\n    circleVline(circle, line)\n    {\n\n    }\n}\n"]}