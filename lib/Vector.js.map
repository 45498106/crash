{"version":3,"sources":["../src/Vector.js"],"names":["Vector","x","y","create","clone","v","add","o","a","b","copy","sub","invert","mul","s","dot","len","Math","sqrt","lengthSq","normalize","scale","distance","dx","dy","distanceSq","set","lerp","ratio","rad","atan2","equels","rotate","angle","cos","sin","project","dp","projectPoint","p"],"mappings":"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","file":"Vector.js","sourcesContent":["\n\nexport default class Vector\n{\n   /*\n     * @class Vector\n     * @constructor\n     * @param x {Number} position of the point\n     * @param y {Number} position of the point\n     */\n    constructor(x, y)\n    {\n        /**\n         * @property x\n         * @type Number\n         * @default 0\n         */\n        this.x = x || 0;\n\n        /**\n         * @property y\n         * @type Number\n         * @default 0\n         */\n        this.y = y || 0;\n    };\n\n    static create(x, y)\n    {\n        return new Vector(x, y);\n    }\n\n    static clone(v)\n    {\n        return new Vector(v.x, v.y);\n    }\n\n    static add(o, a, b)\n    {\n        o.x = a.x + b.x;\n        o.y = a.y + b.y;\n\n        return o;\n    }\n\n    static copy(o, a)\n    {\n        o.x = a.x;\n        o.y = a.y;\n\n        return o;\n    }\n\n    static sub(o, a, b)\n    {\n        o.x = a.x - b.x;\n        o.y = a.y - b.y;\n\n        return o;\n    }\n\n    static invert(o, v)\n    {\n        o.x = v.x * -1;\n        o.y = v.y * -1;\n\n        return o;\n    }\n\n    static mul(o, v, s)\n    {\n        o.x = v.x * s;\n        o.y = v.y * s;\n\n        return o;\n    }\n\n    static dot(a, b)\n    {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    static len(a)\n    {\n        return Math.sqrt(a.x * a.x + a.y * a.y);\n    }\n\n    static lengthSq(a)\n    {\n        return a.x * a.x + a.y * a.y;\n    }\n\n    static normalize(o, a)\n    {\n        const scale = Math.sqrt(a.x * a.x + a.y * a.y);\n\n        if(scale === 0)return 0;\n\n        o.x = a.x / scale;\n        o.y = a.y / scale;\n\n        return o;\n    }\n\n    static distance(a, b)\n    {\n        const dx = a.x - b.x;\n        const dy = a.y - b.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    static distanceSq(a, b)\n    {\n        const dx = a.x - b.x;\n        const dy = a.y - b.y;\n\n        return dx * dx + dy * dy;\n    }\n\n    static set(v, x, y)\n    {\n        v.x = x || 0;\n        v.y = y || ( (y !== 0) ?  v.x : 0 ) ;\n\n        return v;\n    }\n\n    static lerp(o, a, b, ratio)\n    {\n        o.x = a.x + (b.x - a.x) * ratio;\n        o.y = a.y + (b.y - a.y) * ratio;\n\n        return o\n    }\n\n    static rad(v)\n    {\n        return Math.atan2(v.x, v.y);\n    }\n\n    static equels(a, b)\n    {\n        return a.x === b.x && a.y === b.y;\n    }\n\n    static rotate(o, a, angle)\n    {\n        const x = a.x;\n        const y = a.y;\n\n        o.x = x * Math.cos(angle) - y * Math.sin(angle);\n        o.y = x * Math.sin(angle) + y * Math.cos(angle);\n    }\n\n    static project(o, a, b)\n    {\n        var dp = a.x * b.x + a.y * b.y;\n        o.x = ( dp / (b.x*b.x + b.y*b.y) ) * b.x;\n        o.y = ( dp / (b.x*b.x + b.y*b.y) ) * b.y;\n\n        return o;\n    }\n\n    static projectPoint(o, p, a)\n    {\n        /*\n        var positionLine = new Vector(0,0);\n        var projectedPoint = Vector.project(point.clone().minus(positionLine), directionLine);\n\n        return projectedPoint.clone().plus(positionLine);\n         */\n    }\n}\n"]}