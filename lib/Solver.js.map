{"version":3,"sources":["../src/Solver.js"],"names":["temp1","create","temp2","temp3","temp4","Solver","solve","collsions","i","length","collision","ignore","shape1","sensor","shape2","projection","penetration","body1","body2","amount","amount2","type","STATIC","bounce","set","x","y","dx","dy","position","collisionForce","sub","velocity","dot","perp","frictionVector","project","projectionToLine2","bounceVector","len","mul","contactFriction"],"mappings":"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","file":"Solver.js","sourcesContent":["import Body from './Body';\nimport Vector from './Vector';\n\nconst temp1 = Vector.create()\nconst temp2 = Vector.create()\nconst temp3 = Vector.create()\nconst temp4 = Vector.create()\n\nexport default class Solver\n{\n    constructor()\n    {\n\n    }\n\n    solve(collsions)\n    {\n        for (var i = collsions.length - 1; i >= 0; i--)\n        {\n            const collision = collsions[i];\n\n            if(!collision.ignore && !collision.shape1.sensor && !collision.shape2.sensor)\n            {\n                const projection = collision.projection;\n                const penetration = collision.penetration;\n                const body1 = collision.body1;\n                const body2 = collision.body2;\n\n                var amount = 0.5;\n                var amount2 = 0.5;\n\n                if(body2.type === Body.STATIC)\n                {\n                    amount = 1;\n                    amount2 = 0;\n                    this.bounce(body1, body2, projection)\n\n\n                }\n                else if(body1.type === Body.STATIC)\n                {\n                    amount = 0;\n                    amount2 = 1;\n\n                    this.bounce(body2, body1, Vector.set(temp4, -projection.x, -projection.y))\n                }\n\n                var dx = projection.x * penetration;\n                var dy = projection.y * penetration;\n\n                body1.position.x -= dx * amount;\n                body1.position.y -= dy * amount;\n\n                body2.position.x += dx * amount2;\n                body2.position.y += dy * amount2;\n\n\n            }\n        }\n    }\n\n    bounce(body1, body2, projection)\n    {\n        var collisionForce = Vector.sub(temp3, body1.velocity, body2.velocity);\n\n        // this kind works!\n        if(Vector.dot(collisionForce, projection ) > 0)\n        {\n            return;\n        }\n\n        // convert to 90 degs\n        var perp = new Vector(projection.y, -projection.x);\n\n        var frictionVector = Vector.project(temp1, collisionForce, perp);\n        var projectionToLine2 = Vector.project(temp2, collisionForce, projection);\n\n        var bounceVector = new Vector(0, 0);\n        bounceVector.x = projection.x * Vector.len(projectionToLine2);\n        bounceVector.y = projection.y * Vector.len(projectionToLine2);\n\n        Vector.mul(frictionVector, frictionVector, body1.contactFriction);\n        Vector.mul(bounceVector, bounceVector, body1.bounce);\n\n        body1.velocity.x = (frictionVector.x + bounceVector.x);\n        body1.velocity.y = (frictionVector.y + bounceVector.y);\n\n    }\n}\n\n"]}