{"version":3,"sources":["../src/Solver.js"],"names":["Solver","solve","collsions","i","length","collision","projection","penetration","body1","body2","amount","amount2","type","STATIC","bounce","dx","x","dy","y","position","collisionForce","sub","create","velocity","perp","frictionVector","project","projectionToLine2","bounceVector","len","mul","friction"],"mappings":";;;;AAAA;;;;AACA;;;;;;;;IAGqBA,M;AAEjB,sBACA;AAAA;AAEC;;qBAEDC,K,kBAAMC,S,EACN;AACI,aAAK,IAAIC,IAAID,UAAUE,MAAV,GAAmB,CAAhC,EAAmCD,KAAK,CAAxC,EAA2CA,GAA3C,EACA;AACI,gBAAME,YAAYH,UAAUC,CAAV,CAAlB;AACA,gBAAMG,aAAaD,UAAUC,UAA7B;AACA,gBAAMC,cAAcF,UAAUE,WAA9B;AACA,gBAAMC,QAAQH,UAAUG,KAAxB;AACA,gBAAMC,QAAQJ,UAAUI,KAAxB;;AAEA,gBAAIC,SAAS,GAAb;AACA,gBAAIC,UAAU,GAAd;;AAEA,gBAAGF,MAAMG,IAAN,KAAe,eAAKC,MAAvB,EACA;AACIH,yBAAS,CAAT;AACAC,0BAAU,CAAV;;AAEA,qBAAKG,MAAL,CAAYN,KAAZ,EAAmBC,KAAnB,EAA0BH,UAA1B;AAGH,aARD,MASK,IAAGE,MAAMI,IAAN,KAAe,eAAKC,MAAvB,EACL;AACIH,yBAAS,CAAT;AACAC,0BAAU,CAAV;;AAEA,qBAAKG,MAAL,CAAYL,KAAZ,EAAmBD,KAAnB,EAA0BF,UAA1B;AACH;;AAED,gBAAIS,KAAKT,WAAWU,CAAX,GAAeT,WAAxB;AACA,gBAAIU,KAAKX,WAAWY,CAAX,GAAeX,WAAxB;;AAEAC,kBAAMW,QAAN,CAAeH,CAAf,IAAoBD,KAAKL,MAAzB;AACAF,kBAAMW,QAAN,CAAeD,CAAf,IAAoBD,KAAKP,MAAzB;;AAEAD,kBAAMU,QAAN,CAAeH,CAAf,IAAoBD,KAAKJ,OAAzB;AACAF,kBAAMU,QAAN,CAAeD,CAAf,IAAoBD,KAAKN,OAAzB;AACH;AACJ,K;;qBAEDG,M,mBAAON,K,EAAOC,K,EAAOH,U,EACrB;AACI,YAAIc,iBAAiB,iBAAOC,GAAP,CAAW,iBAAOC,MAAP,EAAX,EAA4Bd,MAAMe,QAAlC,EAA4Cd,MAAMc,QAAlD,CAArB;AACA;AACA,YAAIC,OAAO,qBAAWlB,WAAWY,CAAtB,EAAyB,CAACZ,WAAWU,CAArC,CAAX;;AAEA,YAAIS,iBAAiB,iBAAOC,OAAP,CAAe,iBAAOJ,MAAP,EAAf,EAAgCF,cAAhC,EAAgDI,IAAhD,CAArB;AACA,YAAIG,oBAAoB,iBAAOD,OAAP,CAAe,iBAAOJ,MAAP,EAAf,EAAgCF,cAAhC,EAAgDd,UAAhD,CAAxB;;AAEA,YAAIsB,eAAe,qBAAW,CAAX,EAAc,CAAd,CAAnB;AACAA,qBAAaZ,CAAb,GAAiBV,WAAWU,CAAX,GAAe,iBAAOa,GAAP,CAAWF,iBAAX,CAAhC;AACAC,qBAAaV,CAAb,GAAiBZ,WAAWY,CAAX,GAAe,iBAAOW,GAAP,CAAWF,iBAAX,CAAhC;;AAEA,yBAAOG,GAAP,CAAWL,cAAX,EAA2BA,cAA3B,EAA2CjB,MAAMuB,QAAjD;AACA,yBAAOD,GAAP,CAAWF,YAAX,EAAyBA,YAAzB,EAAuCpB,MAAMM,MAA7C;;AAEAN,cAAMe,QAAN,CAAeP,CAAf,GAAoBS,eAAeT,CAAf,GAAmBY,aAAaZ,CAApD;AACAR,cAAMe,QAAN,CAAeL,CAAf,GAAoBO,eAAeP,CAAf,GAAmBU,aAAaV,CAApD;AAEH,K;;;;;kBAnEgBlB,M","file":"Solver.js","sourcesContent":["import Body from './Body';\nimport Vector from './Vector';\n\n\nexport default class Solver\n{\n    constructor()\n    {\n\n    }\n\n    solve(collsions)\n    {\n        for (var i = collsions.length - 1; i >= 0; i--)\n        {\n            const collision = collsions[i];\n            const projection = collision.projection;\n            const penetration = collision.penetration;\n            const body1 = collision.body1;\n            const body2 = collision.body2;\n\n            var amount = 0.5;\n            var amount2 = 0.5;\n\n            if(body2.type === Body.STATIC)\n            {\n                amount = 1;\n                amount2 = 0;\n\n                this.bounce(body1, body2, projection)\n\n\n            }\n            else if(body1.type === Body.STATIC)\n            {\n                amount = 0;\n                amount2 = 1;\n\n                this.bounce(body2, body1, projection)\n            }\n\n            var dx = projection.x * penetration;\n            var dy = projection.y * penetration;\n\n            body1.position.x -= dx * amount;\n            body1.position.y -= dy * amount;\n\n            body2.position.x += dx * amount2;\n            body2.position.y += dy * amount2;\n        }\n    }\n\n    bounce(body1, body2, projection)\n    {\n        var collisionForce = Vector.sub(Vector.create(), body1.velocity, body2.velocity);\n        // convert to 90 degs\n        var perp = new Vector(projection.y, -projection.x);\n\n        var frictionVector = Vector.project(Vector.create(), collisionForce, perp);\n        var projectionToLine2 = Vector.project(Vector.create(), collisionForce, projection);\n\n        var bounceVector = new Vector(0, 0);\n        bounceVector.x = projection.x * Vector.len(projectionToLine2);\n        bounceVector.y = projection.y * Vector.len(projectionToLine2);\n\n        Vector.mul(frictionVector, frictionVector, body1.friction);\n        Vector.mul(bounceVector, bounceVector, body1.bounce);\n\n        body1.velocity.x = (frictionVector.x + bounceVector.x);\n        body1.velocity.y = (frictionVector.y + bounceVector.y);\n\n    }\n}\n\n"]}