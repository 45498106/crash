{"version":3,"sources":["../../src/shapes/Rectangle.js"],"names":["temp","temp2","Rectangle","width","height","position","rotation","RECTANGLE","updateBounds","Math","PI","boundingBox","set","x","y","maxX","Infinity","minX","maxY","minY","point","halfWidth","halfHeight","rotate","max","min"],"mappings":"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","file":"Rectangle.js","sourcesContent":["import Vector from '../Vector'\nimport AABB from '../AABB';\nimport Shape from './Shape';\n\nconst temp = new Vector();\nconst temp2 = new Vector();\n\nexport default class Rectangle extends Shape\n{\n    constructor(width, height, position, rotation)\n    {\n        super(Shape.RECTANGLE, position, rotation);\n\n        this.width = width;\n        this.height = height;\n\n        // TODO make smalle..\n\n        this.updateBounds();\n\n    }\n\n    updateBounds()\n    {\n        const rotation = this.rotation;\n\n        if(rotation % (Math.PI * 2) === 0)\n        {\n            this.boundingBox.set(this.position.x - this.width/2,\n                                 this.position.y - this.height/2,\n                                 this.position.x + this.width/2,\n                                 this.position.y + this.height/2);\n\n        }\n        else if(rotation % (Math.PI * 0.5) === 0)\n        {\n            this.boundingBox.set(this.position.x - this.height/2,\n                                 this.position.y - this.width/2,\n                                 this.position.x + this.height/2,\n                                 this.position.y + this.width/2);\n\n        }\n        else\n        {\n            let maxX = -Infinity;\n            let minX = Infinity;\n\n            let maxY = -Infinity;\n            let minY = Infinity;\n\n            const point = temp2;\n            const halfWidth = this.width/2;\n            const halfHeight = this.height/2;\n\n            point.x = -halfWidth;\n            point.y = -halfHeight;\n\n            Vector.rotate(temp, point, rotation);\n\n            maxX = Math.max(maxX, temp.x);\n            maxY = Math.max(maxY, temp.y);\n            minX = Math.min(minX, temp.x);\n            minY = Math.min(minY, temp.y);\n\n            point.x = halfWidth;\n            point.y = -halfHeight;\n\n            Vector.rotate(temp, point, rotation);\n\n            maxX = Math.max(maxX, temp.x);\n            maxY = Math.max(maxY, temp.y);\n            minX = Math.min(minX, temp.x);\n            minY = Math.min(minY, temp.y);\n\n            point.x = halfWidth;\n            point.y = halfHeight;\n\n            Vector.rotate(temp, point, rotation);\n\n            maxX = Math.max(maxX, temp.x);\n            maxY = Math.max(maxY, temp.y);\n            minX = Math.min(minX, temp.x);\n            minY = Math.min(minY, temp.y);\n\n            point.x = -halfWidth;\n            point.y = halfHeight;\n\n            Vector.rotate(temp, point, rotation);\n\n            maxX = Math.max(maxX, temp.x);\n            maxY = Math.max(maxY, temp.y);\n            minX = Math.min(minX, temp.x);\n            minY = Math.min(minY, temp.y);\n\n            this.boundingBox.set(this.position.x + minX,\n                                 this.position.y + minY,\n                                 this.position.x + maxX,\n                                 this.position.y + maxY);\n        }\n\n    }\n}\n/*\n    Line.prototype.getView = function(color)\n    {\n        return new PIXI.Graphics().lineStyle(5, color || 0x00FF00).moveTo(this.start.x, this.start.y).lineTo(this.end.x, this.end.y);////drawCircle(0,0,this.radius);\n    }\n\n    module.exports = Line;\n\n    Rectangle.prototype.getView = function(color)\n    {\n        var shape = new PIXI.Graphics().beginFill(color || 0x2a3e3f).drawRect(-this.halfWidth/2, -this.height/2, this.width, this.height);\n        shape.rotation = this.rotation;\n\n        return shape;\n    }\n*/\n"]}