{"version":3,"sources":["../src/World.js"],"names":["World","staticBodies","STATIC","dynamicBodies","DYNAMIC","bodies","collisions","narrowPhase","dt","collisionKeys","DEBUG","add","body","type","remove","update","getCollisions","console","log","i","dynamicItems","children","length","reset","empty","getKey","a","b","registerCollison","type1","type2","size","list","sortAxisList","body1","newItemLeft","position","x","boundingBox","upper","j","body2","currentItemRight","lower","canCollide","key","item2","item1","push","l","v","a2"],"mappings":"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","file":"World.js","sourcesContent":["  //  var CollisionTest = require('../Group');\n\nimport Group from './utils/Group';\nimport Body from './Body';\n\nimport NarrowPhase from './NarrowPhase';\n\nexport default class World\n{\n\n\n    constructor()\n    {\n        // on hit test against.. platforms\n\n        this.staticBodies = this[Body.STATIC] = new Group();\n        this.dynamicBodies = this[Body.DYNAMIC] = new Group();\n        this.bodies = new Group();\n\n        this.collisions = [];\n        this.narrowPhase = new NarrowPhase();\n\n        this.dt = 1;\n\n        this.collisionKeys = {};\n\n        this.DEBUG = false;\n\n    }\n\n    add(body)\n    {\n        this[body.type].add(body);\n        this.bodies.add(body);\n    }\n\n    remove(body)\n    {\n        this[body.type].remove(body);\n        this.bodies.remove(body);\n    }\n\n    update()\n    {\n\n        //TODO broadphase\n\n        var collisions = this.getCollisions();\n\n        console.log(collisions);\n\n        for (var i = 0; i < this.dynamicItems.children.length; i++)\n        {\n            this.dynamicItems.children[i].body.update(this.dt);\n        };\n\n        //this.narrowPhase.hitTest(collisions);\n       // };\n\n\n    }\n\n    reset()\n    {\n        this.staticBodies.empty();\n        this.dynamicBodies.empty();\n        this.bodies.empty();\n\n        this.collisions.length = 0;\n\n        this.narrowPhase.reset();\n\n    }\n\n    getKey(a, b)\n    {\n        return (a << 12) + b;\n    }\n\n    registerCollison(type1, type2)\n    {\n        this.collisionKeys[this.getKey(type1, type2)] = true;\n        this.collisionKeys[this.getKey(type2, type1)] = true;\n    }\n\n    getCollisions()\n    {\n        this.collisions.length = 0;\n\n        var size = 0;\n\n        //SAP!\n        var list =  this.bodies.children;\n        this.sortAxisList( list );\n\n        for (var i = 0; i < list.length; i++)\n        {\n            var body1 = list[i];\n            var newItemLeft = body1.position.x + body1.boundingBox.upper.x;\n\n            for (var j = i+1; j < list.length; j++)\n            {\n                var body2 = list[j];\n\n                var currentItemRight = body2.body.position.x + body2.boundingBox.lower.x;// - 5;\n\n                if(newItemLeft <= currentItemRight)\n                {\n                    break;\n                }\n                else\n                {\n                    var canCollide = true;\n                    var key = this.getKey(item2.type, item1.type)\n                    //TODO items that are the same cannot collide..\n\n                    if(!this.collisionKeys[key])//platform.type === item.type && !item.collideWithSelf)\n                    {\n                        canCollide = false;\n                    }\n                    else\n                    {\n                        if(!body2.canCollide || !body1.canCollide)\n                        {\n                            canCollide = false;\n                        }\n                    }\n\n                    if(canCollide)\n                    {\n                       this.collisions.push(body1,\n                                            body2);\n                    }\n                }\n            }\n        };\n\n        // finallly hit tes the bounds..\n\n\n        return this.collisions;\n    }\n\n\n    sortAxisList(a)\n    {\n        for(var i=1,l=a.length; i<l; i++)\n        {\n            var v = a[i];\n            for(var j=i - 1;j>=0;j--)\n            {\n                var a2 = a[j];\n\n                if(a2.boundingBox.lower.x + a2.position.x  <= v.boundingBox.lower.x + v.position.x )\n                {\n                    break;\n                }\n\n                a[j+1] = a[j];\n            }\n\n            a[j+1] = v;\n        }\n\n        return a;\n    };\n\n}"]}